#!groovy
//-------------------------------------------------------------------------------
// Purpose: Seed Job for Job DSL
//          generate jobs from DSL scripts.
// License: eSOL Co.,Ltd.
//-------------------------------------------------------------------------------

def NORMALIZED_REPO_URL_CI = params.REPO_URL_CI.replaceFirst('/$', '').replaceFirst('/test/ci$', '')
def NORMALIZED_JOB_ROOT_PATH = params.ROOT_PATH_TO_GENERATE.replaceFirst('/$', '')

pipeline {

    agent {
        node {
            label 'SEED'
        }
    }

    environment {
        //CREDENTIALS_ID  = 'CID_EP-CI'
        CREDENTIALS_ID  = 'github-credentials-id-ks-onishi-pw'
        REPO_URL_CI_DSL = "$NORMALIZED_REPO_URL_CI"
        DSL_DIR_PATH    = 'test/ci/dsl'
        LOCAL_DIR       = 'dsl'
    }

    stages {

        stage ("Check Parameters") {
            steps {
                script {
                    def url = NORMALIZED_REPO_URL_CI
                    def jobRoot = NORMALIZED_JOB_ROOT_PATH
                    def PROTOTYPE_PATH_PREFIX = '/Prototype_JOB/'
                    def SVN_URL_CI_TRUNK = 'https://thq-server/svn/projects/esl-emcos-platform/trunk'
                    def gitBranch = params.CI_REVISION ?: 'main'

                    if (jobRoot.startsWith(PROTOTYPE_PATH_PREFIX)) {
                        // ROOT_PATH_TO_GENERATE が /Prototype_JOB/ 以下のサブフォルダ
                        // pass
                    } else if (common.getScm(NORMALIZED_REPO_URL_CI) == 'subversion' && jobRoot == '' && url == SVN_URL_CI_TRUNK) {
                        // [SVN] ROOT_PATH_TO_GENERATE が / の場合、REPO_URL_CI は trunk のURLでなければらない
                        // pass
                    } else if (common.getScm(NORMALIZED_REPO_URL_CI) == 'git'        && jobRoot == '' && gitBranch == 'main') {
                        // [Git] ROOT_PATH_TO_GENERATE が / の場合、CI_REVISION は main でなければらない
                        //       main のハッシュを指定しても受け付けない
                        // pass
                    } else {
                        echo "REPO_URL_CI: ${params.REPO_URL_CI}"
                        echo "CI_REVISION: ${params.CI_REVISION}"
                        echo "ROOT_PATH_TO_GENERATE: ${params.ROOT_PATH_TO_GENERATE}"
                        error("The parameters are not acceptable.")
                    }
                }
            }
        }

        stage('List Updated Files') {
            steps {
                script {
                    // SVN
                    if (common.getScm(NORMALIZED_REPO_URL_CI) == 'subversion') {
                        def cid = env.CREDENTIALS_ID
                        def url = "${env.REPO_URL_CI_DSL}/${DSL_DIR_PATH}"
                        def upstreamBuilds = currentBuild.upstreamBuilds

                        if (upstreamBuilds.isEmpty() || !upstreamBuilds[0].buildVariables['TARGET_REVISON']) {
                            revision = params.CI_REVISION ?: 'head'

                            // リポジトリのファイル一覧から、DSL スクリプトのパスを取得
                            // .jenkins を含むファイルのみ表示しディレクトリを除外
                            svn_command = "svn list -R -r $revision $url"
                            sed_command = "sed -ne '/\\.jenkins/p'"
                        }

                        else {
                            def upstreamBuild = upstreamBuilds[0]
                            revision = upstreamBuild.buildVariables['TARGET_REVISON']

                            // 指定リビジョンの変更内容から、更新された DSL スクリプトのパスを取得
                            // 変更(M)、追加(A)されたファイルのみで、削除(D)は除外
                            // .jnekins を含むファイルの $url 以降のパスを取得
                            //     before: M       https://thq-server/svn/projects/esl-emcos-platform/trunk/test/ci/dsl/Tests/Seed.jenkins
                            //     after : Tests/Seed.jenkins
                            svn_command = "svn diff -c $revision --summarize $url"
                            sed_command = "sed -ne 's@\\(^[MA].\\+$url/\\(.\\+\\.jenkins\\)\\)@\\2@p'"
                        }

                        withCredentials([usernamePassword(credentialsId: cid, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            updatedDslScripts = sh (
                                script: svn_command + ' --username $USERNAME --password $PASSWORD | ' + sed_command,
                                returnStdout: true
                            )
                        }
                    }

                    // Git
                    else {
                        def cid = env.CREDENTIALS_ID
                        def repository_url  = NORMALIZED_REPO_URL_CI
                        def repository_name = repository_url.replaceFirst('.+/([^/]+)\\.git', '$1')
                        def repository_proto = repository_url.replaceFirst('(http[s]?://)(.+)', '$1')
                        def repository_host  = repository_url.replaceFirst('(http[s]?://)(.+)', '$2')
                        def dsl_path = DSL_DIR_PATH
                        def upstreamBuilds = currentBuild.upstreamBuilds

                        if (upstreamBuilds.isEmpty() || !upstreamBuilds[0].buildVariables['TARGET_REVISON']) {
                            revision = params.CI_REVISION ?: 'main'

                            // リポジトリのファイル一覧から、DSL スクリプトのパスを取得
                            // .jenkins を含むファイルのみ表示しディレクトリを除外
                            git_command = "git ls-files"
                            sed_command = "sed -ne '/\\.jenkins/p'"
                        }

                        else {
                            def upstreamBuild = upstreamBuilds[0]
                            revision = upstreamBuild.buildVariables['TARGET_REVISON']

                            // 指定リビジョンの変更内容から、更新された DSL スクリプトのパスを取得
                            // 変更(M)、追加(A)されたファイルのみで、削除(D)は除外
                            // .jnekins を含むファイルの $dsl_path 以降のパスを取得
                            //     before: M	test/ci/dsl/Tests/Seed.jenkins
                            //     after : Tests/Seed.jenkins
                            // リネーム(R)、コピー(C)にも対応
                            //     before: R100	/test/ci/dsl/Tests/Before.jenkins	test/ci/dsl/Tests/After.jenkins
                            //     after : Tests/After.jenkins
                            git_command = "git diff --diff-filter=ACMR --name-status ${revision}^..${revision} ."
                            sed_command = "sed -ne 's@^[ACMR].*	${dsl_path}/\\([^	]\\+\\.jenkins\\)@\\1@p'"
                        }

                        dir(WORKSPACE_TMP) {
                            dir(repository_name) {
                                deleteDir()
                            }

                            // パーシャルクローン (ブロブレスクローン) してスパースチェックアウト
                            withCredentials([usernamePassword(credentialsId: cid, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh 'set +x; git clone --filter=blob:none --sparse ' + repository_proto + '${USERNAME}:$(echo ${PASSWORD} | jq -Rr @uri)@' + repository_host
                                sh """
                                    cd ${repository_name}
                                    git sparse-checkout add ${dsl_path}
                                """
                            }

                            updatedDslScripts = sh (
                                script: """
                                    cd ${repository_name}/${dsl_path}
                                    ${git_command} | ${sed_command}
                                """,
                                returnStdout: true)
                        }
                    }

                    print "$updatedDslScripts"
                }  // script
            }  // steps
        }  // stage

        stage('Checkout DSL Scripts') {
            steps {
                script {
                    def cid = env.CREDENTIALS_ID
                    def url = env.REPO_URL_CI_DSL
                    def dir = env.DSL_DIR_PATH
                    def local = env.LOCAL_DIR

                    //common.checkout(cid, local, dir, url, revision)
                    common.checkout(local, dir, url, revision)
                } // script
            } // steps
        } // stage

        stage('Generate Jobs') {
            steps {
                script {
                    def url = NORMALIZED_REPO_URL_CI
                    def dir = env.LOCAL_DIR + '/' + env.DSL_DIR_PATH
                    def jobRoot = NORMALIZED_JOB_ROOT_PATH

                    updatedDslScripts.split("\n").findAll { !it.isEmpty() }.sort().each { dslScript ->
                        def jobPath = jobRoot + '/' + dslScript.replace('.jenkins', '')

                        print "dslScript = $dslScript"
                        print "jobPath   = $jobPath"

                        sh script: "cp -f $dir/$dslScript __dslScript.jenkins"
                        if (!params.ENABLE_SCHED) {
                            sh script: "sed -i -e 's/spec(.\\+)/spec('\\'\\'')/' __dslScript.jenkins"
                        }

                        jobDsl targets: '__dslScript.jenkins',
                               additionalParameters: [JOB_PATH_TO_GENERATE: jobPath,
                                                      REPOSITORY_URL      : url,
                                                      SVN_URL_CI          : url + '/test/ci']
                    }
                }  // script
            }  // steps
        }  // stage

    }  // stages

}  // pipeline
