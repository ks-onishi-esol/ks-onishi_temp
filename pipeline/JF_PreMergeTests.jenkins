#!groovy
//-------------------------------------------------------------------------------
// Purpose     : Auto Merge ルートジョブ用パイプラインスクリプト
// License     : eSOL Co.,Ltd.
//-------------------------------------------------------------------------------

def executeTestJobList = []

def userIdCause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

// Jenkinsのビルドステータス定義
// 各スクリプトの戻り値としても使用する
STATUS_SUCCESS     = 0          // JenkinsステータスSUCCESS
STATUS_FAILURE     = 1          // JenkinsステータスFAILURE
STATUS_UNSTABLE    = 2          // JenkinsステータスUNSTABLE

pipeline {

    agent {
        node {
            // ノードのラベルはジョブの設定から受け取ることとしている
            label NODE_NAMES
            // カスタムワークスペース
            // agent.node 内でジョブのパラメータは変数直参照
            customWorkspace CUSTOM_WORKSPACE
        }
    }

    environment {
        CREDENTIALS_ID = "CID_GITHUB"

        // ビルド用バッチの リポジトリ URL とclone先
        LOCAL_CI_RESOURCE_DIR   = "ci_resource"
        REPO_CORE_SCRIPTS_DIR   = "test/ci/coreScripts"                             // ワークスペース内のスクリプトディレクトリ名
        CORE_SCRIPTS_DIR        = "$LOCAL_CI_RESOURCE_DIR/$REPO_CORE_SCRIPTS_DIR"
        CORE_SCRIPTS_PATH       = "$WORKSPACE/$CORE_SCRIPTS_DIR"

        // ジョブ名を省略する際に使用
        REMOVAL_TEST_PREFIX = "Trunk_Root_|Trunk_Test_|Trunk_TestRoot_"

        // For Debug
        List pre_commit_test_list = 'Tests/SDK/SampleStub'
    }

    stages {
        stage('Create Environment') {
            steps {
                script {
                    // ジョブ実行用スクリプトをチェックアウト
                    scrRev = common.checkout(CREDENTIALS_ID, LOCAL_CI_RESOURCE_DIR, REPO_CORE_SCRIPTS_DIR, params.REPO_URL_CI, '')
                    println "scrRev: ${scrRev}"
                    
                    if (env.GITHUB_PR_HEAD_SHA) {
                        // プルリクエストから呼ばれた場合
                        env.GIT_COMMIT_HASH = env.GITHUB_PR_HEAD_SHA
                    } else if (env.TEST_COMMIT_HASH) {
                        // 手動実行時にTEST_COMMIT_HASHが設定されている
                        env.GIT_COMMIT_HASH = env.TEST_COMMIT_HASH.trim()
                    } else {
                        // 手動実行時にTEST_COMMIT_HASHの指定が無い場合はHEADの値を設定
                        env.GIT_COMMIT_HASH = "${scrRev}"
                    }

                    // ビルド情報表示
                    currentBuild.displayName = "#$BUILD_NUMBER (${env.GIT_COMMIT_HASH})"
                }
            }
        }
        
        stage('Generate Test Jobs') {
            // For Debug
            when {
                expression {
                    !params.SKIP_GENERATE
                }
            } // For Debug
            steps {
                script {
                    // マージ前テストを省略するフラグが立っていない場合に実行
                    if (!params.SKIP_PRE_MERGE_TESTS) {
                        // 子ジョブ呼び出し用パラメータ生成
                        def seedParams = []
                        seedParams.add([$class: "StringParameterValue", name: "REPO_URL_CI", value: "${params.REPO_URL_CI}"])
                        seedParams.add([$class: "StringParameterValue", name: "CI_REVISION", value: "${GIT_COMMIT_HASH}"]) // pull requests したブランチの最新のコミットハッシュを渡す
                        seedParams.add([$class: "StringParameterValue", name: "ROOT_PATH_TO_GENERATE", value: env.ROOT_PATH_TO_GENERATE])
                        seedParams.add([$class: "BooleanParameterValue", name: "ENABLE_SCHED",   value: false])

                        build job: "${env.JOB_ROOT_PATH}/Tests/Seed", parameters: seedParams
                    }
                }
            }
        }

        stage('Run Test Jobs') {
            steps {
                script {
                    // マージ前テストを省略するフラグが立っていない場合に実行
                    if (!params.SKIP_PRE_MERGE_TESTS) {
                    
                        // プレコミットテストの選択機能
                        List selectedTestJobList = "${params.SELECT_SKIP_PRE_COMMIT_TESTS}".split(",").collect { it.trim() }
                        List preCommitTestJobList = "${env.PRE_COMMIT_TEST_LIST}".split(",").collect { it.replace("'", "").trim()}
                        executeTestJobList = (preCommitTestJobList.toSet() - selectedTestJobList.toSet()) as List
                        
                        if (executeTestJobList.size() == 0) {
                            error("If you want to skip all tests, enable SKIP_PRE_MERGE_TESTS to perform them.")
                        }

                        // summaryの作成
                        def summary = createSummary(icon: 'headshot.gif', text: "<h3>pre merge tests results.</h3>")

                        def testStages = [:]
                        for (testJob in executeTestJobList) {
                            def TEST_JOB = testJob
                            testStages[TEST_JOB] = {
                                def STAGE_NAME = extractJobPathToTestName(TEST_JOB , REMOVAL_TEST_PREFIX)
                                stage("${STAGE_NAME}") {
                                    // 全テスト共通パラメータ
                                    // ※ 一部のパラメータは、テストジョブによっては参照しない。
                                    def buildParams  = []
                                    buildParams.add([$class: "StringParameterValue", name: "REPO_URL_SOURCE", value: "$REPO_URL_SOURCE"])
                                    buildParams.add([$class: "StringParameterValue", name: "REPO_URL_CI", value: "$REPO_URL_CI"])
                                    buildParams.add([$class: "StringParameterValue", name: "SOURCE_REVISION", value: "${GIT_COMMIT_HASH}"])
                                    buildParams.add([$class: "StringParameterValue", name: "JOB_ROOT_PATH", value: env.ROOT_PATH_TO_GENERATE])
                                    buildParams.add([$class: "StringParameterValue", name: "NOTIFICATION_URL", value: ""])
                                    buildParams.add([$class: "BooleanParameterValue", name: "ENABLE_MENTION", value: "false"])
                                    if (TEST_JOB.contains('Boottime')) {
                                        // BootCheckジョブ実行時のビルドパラメータ
                                        build_param_kernel = '-DMCOS_CFG_TPOOL_MAX="0" -DUSE_EB_RUNTIME="OFF" -DMCOS_CFG_DS_TRACE_ENABLE="OFF" -DMCOS_CFG_DS_PRINT_ENABLE="OFF" -DMCOS_CFG_DS_TIME_ENABLE="0" -DTPART_ENABLED="OFF"'
                                        build_param_ru     = '-DUSER_SAMPLE="OFF" -DUSER_TTY_DEVICE_DRIVER="OFF" -DUSER_SHELL="OFF" -DUSE_EB_RUNTIME="OFF" -DMCOS_FUSA="ON"'

                                        buildParams.add([$class: "StringParameterValue", name: "BUILD_PARAM_KERNEL", value: build_param_kernel])  // BootCheck用カーネルビルドパラメータ
                                        buildParams.add([$class: "StringParameterValue", name: "BUILD_PARAM_RU",     value: build_param_ru])      // BootCheck用レジデントユニット(RU)ビルドパラメータ
                                    } // if (TEST_JOB.contains('Boottime'))

                                    def childJob = build job: "${env.ROOT_PATH_TO_GENERATE}/${TEST_JOB}", parameters: buildParams, propagate: false

                                    // 一周毎にsummaryを更新
                                    summaryUpdateWithProjectName(summary, childJob, "$GIT_COMMIT_HASH")

                                    // [FIXME]
                                    // Boottime測定ジョブでFuSaオプション適用するとWarning(UNSTABLE)となり
                                    // AutoMergeがエラーで止まってしまうので、一時的にUNSTABLEは無視して先へ進むようにする。
                                    // FuSaオプション適用ビルドでSUCCESSするようになったらこのif文はcopyArtifactsを残して削除する。
                                    // テストジョブ呼び出し時の propagate: false も削除する。
                                    if (TEST_JOB.contains('Boottime')) {
                                        // FuSa 向けビルド済みオブジェクトファイルを取得
                                        copyArtifacts ( projectName: "${env.ROOT_PATH_TO_GENERATE}/${TEST_JOB}", 
                                                        selector: specific("${childJob.number}"), 
                                                        filter: "${OBJ_PATH}/*.*", 
                                                        target: "source", 
                                                        optional: true)

                                        switch (childJob.result) {
                                            case "FAILURE"  : error("Failed to build of ${TEST_JOB}"); break
                                            case "UNSTABLE" : echo("Detected build warning of ${TEST_JOB}. But treat it as SUCCESS."); break
                                            case "NOT_BUILT": error("Not built of ${TEST_JOB}"); break
                                            case "ABORTED"  : error("Aborted to build of ${TEST_JOB}"); break
                                        //  case "SUCCESS"  : echo("SUCCESS to build of ${TEST_JOB}")
                                        } // switch (childJob.result)
                                    } else {
                                        switch (childJob.result) {
                                            case "FAILURE"  : error("Failed to build of ${TEST_JOB}"); break
                                            case "UNSTABLE" : error("Detected build warning of ${TEST_JOB}"); break
                                            case "NOT_BUILT": error("Not built of ${TEST_JOB}"); break
                                            case "ABORTED"  : error("Aborted to build of ${TEST_JOB}"); break
                                        //  case "SUCCESS"  : echo("SUCCESS to build of ${TEST_JOB}")
                                        } // switch (childJob.result)
                                    } // else
                                } // stage
                            } // testStages[TEST_JOB]
                        } // for
                        testStages.failFast = true
                        parallel(testStages)
                    } // if (!params.SKIP_PRE_MERGE_TESTS)
                } // script
            } // steps
        } // stage('Run Test Jobs')
    } // stages

    // 終了処理
    post {
        // 必ず実行
        always {
            // 終了処理
            echo 'clean up ci_resource directory.'
            dir(env.WORKSPACE) {
                deleteDir()
            }
            script {
                if (env.GITHUB_PR_HEAD_SHA) {
                    // pull reqeusts のcheks に本ジョブのステータスを反映
                    githubPRStatusPublisher buildMessage: message(failureMsg: githubPRMessage('Can\'t set status; build failed.'), successMsg: githubPRMessage('Can\'t set status; build succeeded.')), statusMsg: githubPRMessage('${GITHUB_PR_COND_REF} run ended'), unstableAs: 'FAILURE'
                }
            }
        } // always

        // 処理成功
        success {
            // Jenkins ログ出力
            echo "Build succeeded. ${env.JOB_NAME}:#${env.BUILD_NUMBER}"

            // Teams へ通知
            // notifyBuildStatus(STATUS_SUCCESS)
        }

        // 処理成功 (警告有り)
        unstable {
            // Jenkins ログ出力
            echo "Build succeeded with warning. ${env.JOB_NAME}:#${env.BUILD_NUMBER}"

            // Teams へ通知
            // notifyBuildStatus(STATUS_UNSTABLE)
        }

        // 処理失敗
        failure {
            // Jenkins ログ出力
            echo "Build failed. ${env.JOB_NAME}:#${env.BUILD_NUMBER}"

            // Teams へ通知
            // notifyBuildStatus(STATUS_FAILURE)
        }

    } // post
} // pipeline

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ジョブパスからプレフィックスを取り除きテスト名を取得する。
def extractJobPathToTestName(jobPath, replace_prefix) {
    // ファイル名を取得
    def jobName = jobPath.split('/').last()
    // プレフィックスを取り除く
    def testName = jobName.replaceAll("^(${replace_prefix})", "")
    return testName
}

// Teamsへビルド結果通知
def notifyBuildStatus(buildStatus) {
    script {
        //通知先設定が有効な場合
        if (params.NOTIFICATION_URL) {
            // withCredentials 内で参照する値を環境変数に追加
            env.BUILD_STATUS = buildStatus
            // teams 通知スクリプト実行
            sh '''
                py -3 $CORE_SCRIPTS_PATH/NotificationScripts/SendAutoMergeToTeams.py \
                                    --url $NOTIFICATION_URL \
                                    --jobName $JOB_NAME \
                                    --jobUrl $BUILD_URL \
                                    --buildNumber $BUILD_NUMBER \
                                    --status $BUILD_STATUS \
                                    --user $USER_NAME \
                                    --accountInfoFile $CORE_SCRIPTS_PATH/NotificationScripts/MailAccountList.txt
            '''
        } else {
            echo 'Notification URL is not set and the processing is skipped.'
        }
    }
}

// JobIteratorで呼び出したジョブが終了した際に、実行したジョブの情報をsummaryに追記する。
def summaryUpdateWithProjectName(summary, childJob, revision) {
    // ステータス別の色指定
    def jobStatus
    switch(childJob.currentResult) {
        case "SUCCESS":
            jobStatus = "<span style='color:green'>${childJob.currentResult}</span>"
            break
        case "UNSTABLE":
            jobStatus = "<span style='color:orange'>${childJob.currentResult}</span>"
            break
        case "FAILURE":
            jobStatus = "<span style='color:red'>${childJob.currentResult}</span>"
            break
        case null:
            jobStatus = "<span style='color:gray'>UNKNOWN</span>"
            break
        default:
            jobStatus = "<span style='color:gray'>${childJob.currentResult}</span>"
    }
    // Epoch timeを yyyy-MM-dd HH:mm:ss 形式に変換
    def startTime = new Date(childJob.startTimeInMillis)
    def formattedStartDate = startTime.format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('Asia/Tokyo'))
    // AGENT_NAMEが設定されているか確認
    if (childJob.buildVariables.AGENT_NAME != null) {
        nodeName = ", " + childJob.buildVariables.AGENT_NAME
    } else {
        nodeName = ''
    }
    // durationを HH:mm:ss 形式に変換
    def durationMillis = childJob.duration // duration in milliseconds
    int durationSeconds = (durationMillis / 1000).toInteger() // convert BigDecimal to integer
    int hours = durationSeconds / 3600
    int minutes = (durationSeconds % 3600) / 60
    int seconds = durationSeconds % 60
    def formattedDuration = String.format("%02d:%02d:%02d", hours, minutes, seconds)
    summary.appendText("${childJob.projectName} <a href=${childJob.absoluteUrl}>#${childJob.number}</a> ${jobStatus} (${revision}$nodeName) Date: $formattedStartDate Run time: $formattedDuration<br>", false)
}